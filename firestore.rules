rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can only read and write to their own profile. Admins can read any.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      // deny delete
    }

    // Blog posts are public to read. Only admins can write.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // AI tools data is public to read. Only admins can write.
    match /ai_tools/{toolId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    // Pricing plans are public to read. Only admins can write.
    match /pricingPlans/{planId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    // Recent upgrades are public to read. Only admins can write.
    match /recent_upgrades/{upgradeId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    // Payments can be created by any authenticated user.
    // Only admins can read all payments and update their status.
    match /payments/{paymentId} {
      allow create: if request.auth != null;
      allow read, update: if isAdmin();
    }
  }
}